---
CVE: CVE-2011-3094
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curated: true
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced: 2012-05-15 20:55:02.823000000 -04:00
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  The input validation vulnerability did not properly handle Tibetan text, and thus an
  out-of-bounds read could occur during Tibetan handling. If a Tibetan letter was followed
  by a Tibetan cantillation sign, a global buffer overflow would be reported.

  The vulnerability was located in the method called tibetan_form().

  This vulnerability could be exploited by remote attackers, who could execute arbitrary
  code on the system and cause a denial of service via the out-of-bounds read through 
  the use of unspecified vectors. They can accomplish this by persuading a victim to
  visit a specially-crafted site where they could exploit the vulnerability to trigger the
  out-of-bounds read in order to execute the arbitrary code on the system.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  date: 
  amount: 0.0
  references:
    - https://bugs.chromium.org/p/chromium/issues/detail?id=342618
reviews:
- 10024052
- 10267007
bugs:
- 122586
repo: 
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- :commit: 94e715503fa84149250d01f31cbc64a683b9cd55
  :note: |
    The absolute value of c needed to be smaller than 0x0fc0, as opposed to less than
    or equal to.
vccs:
- :commit: 0e3f30727adf5ca0a76ddae8c7bc53eaecdb2380
  :note: |
    In this commit, the SyncSetupHandler unit tests were updated to set/check 
    individual types. A followup on the CL with some unit test refactoring was
    conducted, and some pending TODOs were cleaned up. This vcc is associated with
    bug 119653, which aimed to set all data types in bulk for unit testing as opposed
    to individually setting them.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module.

    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  answer: |
    As stated in the fix commit 94e715503fa84149250d01f31cbc64a683b9cd55, all testing
    for this vulnerability was supposed to be manually done, thus there were no unit
    tests implemented nor committed.
  code: false
  fix: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The "automated" flag can be true, false, or nil.
    The "google" flag can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    According to the information provided at https://www.securitytracker.com/id?1027067,
    a user by the name of "miaubiz" first reported this vulnerability.
  date: 2012-04-08
  automated: false
  google: false
  contest: 
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer:
    Based on the vulnerability details recorded in the following link -
    https://bugs.chromium.org/p/chromium/issues/detail?id=122586
  name: Internals
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    If there are no interesting commits, demonstrate that you completed this section by explaining what happened between the VCCs and the fix.
  answer:
  commits:
  - commit: e161ba15b5be329b35351b6242d61852bfd2b4b1
    note: |
      A fix was implemented to prevent app banners when a matching hosted/bookmark app 
      exists in ChromeOS, as app banners did not have a check in place to see if there was
      an existing matching bookmark or hosted app.
  - commit: 
    note: 
major_events:
  question: |
    Please record any major events you found in the history of this
    vulnerability. Was the code rewritten at some point? Was a nearby subsystem
    changed? Did the team change?

    The event doesn't need to be directly related to this vulnerability, rather,
    we want to capture what the development team was dealing with at the time.
  answer: I saw one major event during this time.
  events:
  - name: |
    The event entailed fixing the QtWebKit build with OpenGLES after GC3D/E3D had been
    refactored. This included the removal of E3DQt and it being replaced with 
    E3DOpenGLES; enabling defines fot Qt; the addition of pure virtual stubs; the
    removal of the PROC suffix; the addition of a previously removed function; use of 
    a port-specific PLATFORM(BLACKBERRY) guard; and the use of USE(OPENGL_ES_2) guard
    instead of having to always load OpenGL extensions.
    date: 2012-07-13
  - name: 
    date: 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: 
    note: 
  least_privilege:
    applies: true
    note: |
      The attacker would only need the same privilege as an average user.
  frameworks_are_optional:
    applies: 
    note: 
  native_wrappers:
    applies: 
    note: 
  distrust_input:
    applies: true
    note: |
      An attacker can execute arbitrary code on the system by luring the targeted user
      to a site that's specifically crafted to trigger the out-of-bounds read and thus
      cause a denial of service, and the fix for this vulnerability concerned preventing
      the input of Tibetan text that would be improperly handled and result in this error.
  security_by_obscurity:
    applies: 
    note: 
  serial_killer:
    applies: 
    note: 
  environment_variables:
    applies: 
    note: 
  secure_by_default:
    applies: 
    note: 
  yagni:
    applies: 
    note: 
  complex_inputs:
    applies: 
    note: 
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    A mistake that allowed for that out-of-bounds error was that some variable "c", which
    most likely represents the index for the buffer, was allowed to be either less than or
    equal to 0x0fc0, which in turn allowed that out-of-bounds error to occur. It appeared
    to have been an oversight in how the boundary cases were addressed and thus limited
    incorrectly.
